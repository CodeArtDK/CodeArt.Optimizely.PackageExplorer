@using CodeArt.Optimizely.PackageExplorer.Services
@using CodeArt.Optimizely.PackageExplorer.Core.Models

@inject PackageService package;

<MudDataGrid Items="@package.ContentItems" Hover="true" Striped="true" Filterable="true" SortMode="SortMode.Single" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Content Items</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="ContentItem" />
        <PropertyColumn Property="x => x.PageURLSegment" Title="URL Segment" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.ContentTypeName" Title="Content Type" />
        <PropertyColumn Property="x => x.PageStartPublish" Title="Start Publish" />
        <PropertyColumn Property="x => x.PageLanguageBranch" Title="Language" />
        <PropertyColumn Property="x => x.PageMasterLanguageBranch" Title="Master Language" />
    </Columns>
    <ChildRowContent>
       <ContentDetails Item="@context.Item"/>
    </ChildRowContent>
</MudDataGrid>

@code{

    private string _searchString;


    private Func<ContentItem, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.ContentLink!=null && x.ContentLink.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ContentTypeId!=null && x.ContentTypeId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name!=null && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ContentTypeName!=null && x.ContentTypeName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.PageURLSegment!=null && x.PageURLSegment.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ParentLink != null && _searchString.StartsWith("parent:",StringComparison.InvariantCultureIgnoreCase) && x.ParentLink.Contains(_searchString.Replace("parent:","",StringComparison.InvariantCultureIgnoreCase).Trim(), StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}