@page "/"
@page "/upload"
@using CodeArt.Optimizely.PackageExplorer.Components
@using CodeArt.Optimizely.PackageExplorer.Core.Models
@using CodeArt.Optimizely.PackageExplorer.Core.Services
@using CodeArt.Optimizely.PackageExplorer.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ILogger<Home> Logger
@inject IJSRuntime JS
@inject PackageService package;

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="m-4 p-4 mt-12">
        <MudStack Spacing="2">

            <!-- Intro Text -->
            <MudText Typo="Typo.caption">
                Open an Optimizely content package (.episerverdata) to explore its contents. Everything is local in your browser.
            </MudText>

            <!-- File Upload with Button and Status Message -->
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudFileUpload T="IBrowserFile" FilesChanged="OnFilesChanged" MaximumFileCount="1" Accept=".episerverdata,.episerverpackage">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload">
                            Open File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>

                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <MudText Color="Color.Info">@StatusMessage</MudText>
                }
            </MudStack>

        </MudStack>

        @if (_isLoading)
        {
            <div class="d-flex justify-center mt-6">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
            </div>
        }

        @if (package.ContentItems != null)
        {
            <!-- Tabs for content -->
            <MudTabs Class="mt-4" Rounded="true" Outlined="true">

                <MudTabPanel Text="@($"Overview")">
                    <Overview/>

                </MudTabPanel>

                <MudTabPanel Text="@($"Content ({package.ContentItems.Count})")">
                    <ContentTable/>

                </MudTabPanel>

                <MudTabPanel Text="Content Tree">
                    <ContentTree/>
                </MudTabPanel>

                <MudTabPanel Text="@($"Content Types ({package.ContentTypes.Count})")">
                    <ContentTypeView />
                </MudTabPanel>

                <MudTabPanel Text="Media" >
                    <MediaView/>
                </MudTabPanel>

                <MudTabPanel Text="Visitor Groups" Visible="false">
                    <MudText>Visitor Groups will appear here</MudText>
                </MudTabPanel>

                <MudTabPanel Text="Categories" Visible="false">
                    <CategoryView/>
                </MudTabPanel>
            </MudTabs>
        }
    </MudPaper>

</MudContainer>

@code {
    private string StatusMessage;
    private InputFile? fileInput;
    private bool _isLoading = false;


    private async Task OnFilesChanged(IBrowserFile file)
    {
        _isLoading = true;
        Console.WriteLine($"File name: {file.Name}");
        StatusMessage = $"Loading {file.Name} , Size: {FormatFileSize(file.Size)}";
        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 100_000_000);
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            await package.LoadPackage(memoryStream);
           // await JS.InvokeVoidAsync("if(window.Prism) Prism.highlightAll();");

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reading file");
            StatusMessage = "Error processing the file.";
        }
        finally
        {
            _isLoading = false;
        }

        Console.WriteLine($"Uploaded: {file.Name}, Size: {file.Size}");
    }

    public static string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.#} {sizes[order]}";
    }
}
